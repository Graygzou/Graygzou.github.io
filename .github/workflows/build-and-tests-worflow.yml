#############################################################################
# Grégoire Boiron <gregoire.boiron@gmail.com>
# Copyright (c) 2018-2021 Grégoire Boiron  All Rights Reserved.
#############################################################################

name: Build and Tests

on:
  push:
  pull_request:
    branches:
      - develop

#The environment is not setup correctly to use that.
#Need to have gem install pkg-config -v "~> 1.1" to make it work.
#env:
#  NOKOGIRI_USE_SYSTEM_LIBRARIES: true

jobs:
  setup:
    name: Setup in order to run jekyll commands
    runs-on: ubuntu-16.04
    defaults:
      run:
        shell: bash
        working-directory: ./jekyll
    steps:
      - name: Github checkout
        uses: actions/checkout@v2   # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
        with:
          fetch-depth: 2

      # Cache dependencies: will attempt to restore a cache based on the key you provide.
      # shorten build times and decrease load on servers.
      # see https://github.com/actions/cache/blob/main/examples.md#ruby---bundler
      - name: Github cache
        uses: actions/cache@v2
        with:
          path: |
            vendor/bundle
            ${{ env.GITHUB_REPOSITORY }}/tmp/.htmlproofer
          key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: | 
            ${{ runner.os }}-gems-

      - name: Github Set up Ruby 2.6
        uses: actions/setup-ruby@v1
        with:
          ruby-version: 2.6.x

      # Make sure path match the one declared in actions/cache
      - name: Install Bundler
        uses: ./.github/actions/install
        with:
          bundle_path: vendor/bundle

      - name: Check files changed
        run: git log --name-only -n 1 ${{ github.sha }} --pretty="format:" ${{ github.GITHUB_REF }} > last-commit.txt;
        if: ${{ github.event_name }} != "pull_request"

      - name: Upload file changed output
        uses: actions/upload-artifact@v1
        with:
          name: output-txt-file
          path: last-commit.txt
          
  build:
    name: Build
    runs-on: ubuntu-16.04
    needs: setup
    defaults:
      run:
        shell: bash
    steps:
      - name: Github Set up Ruby 2.6
        uses: actions/setup-ruby@v1
        with:
          ruby-version: 2.6.x

      - name: Github checkout
        uses: actions/checkout@v2

      - name: jekyll-development-build
        uses: ./.github/actions/jekyll-build
        with:
          bundle-path: vendor/bundle
          project-folder: ./jekyll
          config-option: _config.yml,_config_dev.yml
          destination-relative-folder: site
        if: ${{ github.event_name == 'push' }}

      - name: jekyll-production-build
        uses: ./.github/actions/jekyll-build
        with:
          bundle-path: vendor/bundle
          project-folder: ./jekyll
          config-option: _config.yml
          destination-relative-folder: site
        if: ${{ github.event_name == 'pull_request' }}

      - name: Upload build through artifacts
        uses: actions/upload-artifact@v1
        with:
          name: build
          path: jekyll/site/
        if: ${{ success() }}
  
  tests:
    name: Tests
    runs-on: ubuntu-16.04
    needs: build
    defaults:
      run:
        shell: bash
    steps:
      - name: Github Set up Ruby 2.6
        uses: actions/setup-ruby@v1
        with:
          ruby-version: 2.6.x

      - name: Github checkout
        uses: actions/checkout@v2
        
      - name: Download the build
        uses: actions/download-artifact@v2
        with:
          name: build
          path: build/

      - name: html-proofer
        uses: ./.github/actions/html-proofer
        with:
          bundle-path: vendor/bundle
          bundle-folder: ./jekyll
          html-relative-folder: ../build
          url-ignore: "https://www.linkedin.com/in/gregoire-boiron/,https://www.latecoere.aero/en/"


  lighthouse-ci:
    name: Run lighthouse checks
    runs-on: ubuntu-latest
    needs: build
    defaults:
      run:
        shell: bash
    env:
      LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
    steps:
      - name: Github checkout
        uses: actions/checkout@v2

        # we stick with a previous version to make lighthouse cli works.
      - name: "Install v12 of node"
        uses: actions/setup-node@v2
        with:
          node-version: '12'

      - name: Download lighthouse ci
        run: |
          echo "::group::install_lighthouse_ci"
          npm install -g @lhci/cli@0.3.x
          echo "::endgroup::"

      - name: Github Set up Ruby 2.6
        uses: actions/setup-ruby@v1
        with:
          ruby-version: 2.6.x

      - name: Install bundler
        run: gem install bundler
        shell: bash

      - name: Setup bundler correctly
        working-directory: jekyll/
        run: |
          echo "::group::bundle commands"
          bundle update --bundler
          bundle config path vendor/bundle
          bundle install --jobs 4 --retry 3
          echo "::endgroup::"
        shell: bash
          
      # Deploy the website locally so lighthouse can run tests on it
      # --detach option let us run commands after serving the site
      - name: Deploy website locally
        run: |
          echo "::group::run_local_build"
          ( cd jekyll && bundle exec jekyll serve --detach \;)
          echo "::endgroup::"

      # Create the config for lighthouse-ci
      - name: Create lighthouse config
        run: |
          echo "::group::init_lighthouse_config"
          ( python ./.github/scripts/validation/getAllWebsitePages.py 0 "jekyll/_site/sitemap.xml" \;)
          echo "::endgroup::"

      - name: Run health checks
        run: |
          echo "::group::healthcheck_lighthouse"
          lhci healthcheck --fatal --checks=${{ env.LHCI_GITHUB_APP_TOKEN }}
          echo "::endgroup::"

      # Run the tests
      - name: Start lighthouse
        run: |
          echo "::group::start_lighthouse"
          lhci autorun --config=./lighthouserc.json
          echo "::endgroup::"
      
      # Kill the background process of the deployment
      - name: Kill local build
        run: |
          echo "::group::kill_local_build"
          pkill -f jekyll
          echo "::endgroup::"
