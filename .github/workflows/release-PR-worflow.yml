name: Release standard CI workflow

on:
  pull_request:
    branches: [ release ]

# Specify the workflow here
jobs:
  # =============================
  setup:
    name: Setup in order to run jekyll commands
    runs-on: ubuntu-16.04
    defaults:
      run:
        shell: bash
        working-directory: ./jekyll
    steps:
      - name: Github checkout
        uses: actions/checkout@v2

      - name: Github cache
        uses: actions/cache@v2
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gems-${{ hashFiles('**  /Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gems-

      - name: Github Set up Ruby 2.6
        uses: actions/setup-ruby@v1
        with:
          ruby-version: 2.6.x

      - name: Install Bundler
        uses: ./.github/actions/install
        with:
          bundle_path: vendor/bundle

  # =============================
  preprocess:
    name: Resize images
    runs-on: ubuntu-16.04
    needs: setup
    defaults:
      run:
        shell: bash
    steps:
      - name: Github checkout
        uses: actions/checkout@v2

      - name: check-contains-jpg-asset
        uses: ./.github/actions/filechanged
        with:
          file-extension: ${{ '*\.jpg$' }}

      - name: check-contains-png-asset
        uses: ./.github/actions/filechanged
        with:
          file-extension: ${{ '*\.png$' }}

      - name: create-webp-images
        uses: ./.github/actions/resizeimg
        with:
          original-folder: "jekyll/assets/"
        if: ${{ steps.check-contains-jpg-asset.outputs.contains-file != '' || steps.check-contains-png-asset.outputs.contains-file != '' }}

  compression:
    name: Compress jpg and png images 
    runs-on: ubuntu-16.04
    defaults:
      run:
        shell: bash
    steps:
      - name: Github checkout
        uses: actions/checkout@v2

      - name: pngquant-png-compression
        run: ./scripts/integration/pngquant-compression.sh

      - name: guetzli-jpg-compression
        run: ./scripts/integration/guetzli-compression.sh

  page-generation:
    name: markdown-generation
    runs-on: ubuntu-16.04
    steps:
      - name: Github checkout
        uses: actions/checkout@v2

      - uses: actions/setup-python@v2
        with:
          python-version: 3.7

      - name: Display Python version
        run: python -c "import sys; print(sys.version)"

      - name: install-dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: generate-markdown
        run: |
          python ./.github/scripts/generation/githubProjectGen.py ${{ secrets.GENERATION_TOKEN }}
          git status

      - name: Upload front matters generation through artifacts
        uses: actions/upload-artifact@v1
        with:
          name: front-matter-gen
          path: jekyll/_includes/projects-front-matter/

      - name: Upload front matters generation through artifacts
        uses: actions/upload-artifact@v1
        with:
          name: project-pages
          path: jekyll/collections/_project-pages/

  svg-creation:
    name: Create svg images
    runs-on: ubuntu-16.04
    needs: setup
    steps:
      - name: check-contains-svg-asset
        uses: ./.github/actions/filechanged
        with:
          file-extension: ${{ '*\.svg$' }}

      - name: svg-creation
        run: python ./.github/scripts/generation/mainSvgGen.py
        if: ${{ steps.check-contains-svg-asset.outputs.contains-file != '' }}

  webp-generation:
    name: Webp images creation
    runs-on: ubuntu-16.04
    needs: setup
    defaults:
      run:
        shell: bash
    steps:
      - name: Github checkout
        uses: actions/checkout@v2

      - name: check-contains-jpg-asset
        uses: ./.github/actions/filechanged
        with:
          file-extension: ${{ '*\.jpg$' }}  

      - name: check-contains-png-asset
        uses: ./.github/actions/filechanged
        with:
          file-extension: ${{ '*\.png$' }}

      - name: debug
        run: |
          echo "${{ steps.check-contains-jpg-asset.outputs.contains-file != '' }}"
          echo "${{ steps.check-contains-png-asset.outputs.contains-file != '' }}"
        shell: bash

      - name: create-webp-images
        uses: ./.github/actions/webp
        with:
          target-folder: "jekyll/assets/webp"
        if: ${{ steps.check-contains-jpg-asset.outputs.contains-file != '' || steps.check-contains-png-asset.outputs.contains-file != '' }}

      - name: test
        run: echo "${{ steps.create-webp-images.outputs.webp-folder }}"

      - name: Upload webp folders through artifacts
        uses: actions/upload-artifact@v1
        with:
          name: webp-images
          path: jekyll/assets/webp/
        if: ${{ steps.create-webp-images.outputs.webp-folder }}

      # Should ALWAYS be the last step.
      - name: teleconsole-launch
        if: ${{ failure() }}
        run: echo "Should launch teleconsole and wait for it to be over."

  # =============================
  build:
    name: Build jekyll project
    runs-on: ubuntu-16.04
    needs: [setup, compression, page-generation, svg-creation]
    defaults:
      run:
        shell: bash
    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: jekyll-production-build
        run: ./scripts/build/build.sh

      # Should ALWAYS be the last step.
      - name: teleconsole-launch
        if: ${{ failure() }}
        run: echo "Should launch teleconsole and wait for it to be over."




      
